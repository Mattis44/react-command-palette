import{_ as i,c as a,o as t,ah as e}from"./chunks/framework.CxbIPHq9.js";const c=JSON.parse('{"title":"Shortcuts","description":"","frontmatter":{},"headers":[],"relativePath":"guide/shortcuts.md","filePath":"guide/shortcuts.md"}'),h={name:"guide/shortcuts.md"};function n(l,s,r,p,k,o){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="shortcuts" tabindex="-1">Shortcuts <a class="header-anchor" href="#shortcuts" aria-label="Permalink to “Shortcuts”">​</a></h1><p>Shortcuts define how users open the palette or trigger special modes. React Command Palette ships with platform-aware presets and lets you register your own key combos.</p><h2 id="built-in-shortcuts" tabindex="-1">Built-in shortcuts <a class="header-anchor" href="#built-in-shortcuts" aria-label="Permalink to “Built-in shortcuts”">​</a></h2><p>Import <code>SHORTCUTS</code> to access ready-to-use combinations. Each preset displays a macOS-friendly symbol but falls back to the Windows/Linux equivalent automatically.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { SHORTCUTS } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@mattis44/react-command-palette&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHORTCUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COMMAND</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // ⌘K / Ctrl+K</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHORTCUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COMMAND_P</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ⌘P / Ctrl+P</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHORTCUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COMMAND_SHIFT_P</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⌘⇧P / Ctrl+Shift+P</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHORTCUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HELP</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ⌘/ / Ctrl+/</span></span></code></pre></div><p>Use them in the provider:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CommandPaletteProvider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shortcut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHORTCUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CommandPaletteProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>The provider automatically listens for <code>Escape</code> to close the palette and clear the current query.</p><h2 id="custom-shortcuts" tabindex="-1">Custom shortcuts <a class="header-anchor" href="#custom-shortcuts" aria-label="Permalink to “Custom shortcuts”">​</a></h2><p>You can supply your own shortcut by passing an object with two fields:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ShortcutValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@mattis44/react-command-palette&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myShortcut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShortcutValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  combo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl+shift+l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// actual keyboard event combo to listen for</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  display: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ctrl+Shift+L&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// string rendered in the UI helper</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>The <code>combo</code> string is split on <code>+</code> and matched against <code>KeyboardEvent</code> modifiers (<code>ctrl</code>, <code>alt</code>, <code>shift</code>) and the final key. Keys are matched case-insensitively.</p><h2 id="global-prefixes" tabindex="-1">Global prefixes <a class="header-anchor" href="#global-prefixes" aria-label="Permalink to “Global prefixes”">​</a></h2><p>Global commands use a different mechanism: instead of key combos, you provide a <strong>prefix</strong> (single character) via the <code>globals.shortcut</code> option. When the user types this prefix as the first character of their query, the palette swaps to the global command list. See the <a href="./commands.html#global-commands">Global commands section</a> for details.</p><h2 id="server-side-rendering" tabindex="-1">Server-side rendering <a class="header-anchor" href="#server-side-rendering" aria-label="Permalink to “Server-side rendering”">​</a></h2><p>Shortcut detection only runs in the browser. Guards inside the library ensure <code>navigator</code> and <code>window</code> access is skipped during SSR, so you can safely use the provider in Next.js or Remix without additional checks.</p>`,16)])])}const g=i(h,[["render",n]]);export{c as __pageData,g as default};
